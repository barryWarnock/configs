(in-package :stumpwm)

(defvar mode-line-is-on nil)
(if (not mode-line-is-on) (mode-line))
(defparameter mode-line-is-on t)

(defvar startup-programs '("redshift" "gnome-screensaver" "emacs --daemon"))
(map nil 'run-shell-command startup-programs)
(defparameter startup-programs '()) ;;only start programs the first time

(stumpwm:set-prefix-key (stumpwm:kbd "C-j"))

(setf *mouse-focus-policy* :click)

(defun get_battery ()
  (run-shell-command "upower -i /org/freedesktop/UPower/devices/battery_BAT1 | grep -Po '(?<=percentage:\\s{10})[0-9]+%' | tr -d '\\n'" t))

(defun get_time ()
  (run-shell-command "date +'%D %H:%M' | tr -d '\\n'" t))

(defun get_network ()
  (let ((nwstr (run-shell-command "nmcli | grep -Po '(?!docker)(?<=connected to ).+' | tr -d '\\n'" t)))
    (if (string= "" nwstr)
	"Not Connected"
	nwstr)))

(setf *screen-mode-line-format*
      (list '(:eval (get_battery)) " | " '(:eval (get_time)) " | " '(:eval (get_network)) " | %w"))

;WIP
(defmacro define-command-and-bind (name command key)
  `(defcommand ,name () ()
	      (print 7))
  `(define-key *root-map* (kbd ,key) ,name)
  )

;; launch Emacs
(defcommand emacs () ()  ;! redefining emacs command
  "Start Emacs or switch to it, if it is already running."
  (run-or-raise "emacsclient -c" '(:class "Emacs")))

(defcommand chrome () ()
  (run-or-raise "google-chrome-stable" '(:class "Google-chrome"))) 
(define-key *root-map* (kbd "g") "chrome")

(defcommand alacritty () ()
  (run-or-raise "alacritty -e tmux" '(:class "Alacritty")))
(define-key *root-map* (kbd "c") "alacritty")

;; lock screen
(defcommand system-lock () ()
	    (run-shell-command "gnome-screensaver-command -l"))
(define-key *root-map* (kbd "L") "system-lock")

;; sleep
(defcommand system-sleep () ()
	    (run-commands "system-lock")
	    (run-shell-command "systemctl suspend"))
(define-key *root-map* (kbd "XF86Sleep") "system-sleep")
