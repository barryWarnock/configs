(in-package :stumpwm)

(stumpwm:set-prefix-key (stumpwm:kbd "C-j"))

(setf *mouse-focus-policy* :click)

(defun get_battery ()
  (run-shell-command "upower -i /org/freedesktop/UPower/devices/battery_BAT0 | grep -Po '(?<=percentage:\\s{10})[0-9]+%' | tr -d '\\n'" t))

(defun get_time ()
  (run-shell-command "date +'%D %H:%M' | tr -d '\\n'" t))

(defun get_network ()
  (let ((nwstr (run-shell-command "nmcli | grep -Po '(?!docker)(?<=connected to ).+' | tr -d '\\n'" t)))
    (if (string= "" nwstr)
	"Not Connected"
	nwstr)))

(setf *screen-mode-line-format*
      (list '(:eval (get_battery)) " | " '(:eval (get_time)) " | " '(:eval (get_network)) " | %w"))
;;(setf *screen-mode-line-format*
;;      (list '(:eval (run-shell-command "date '+%R, %F %a'|tr -d [:cntrl:]" t)) " | %t | %c| %l | [^B%n^b] %W"))


;;(setf stumpwm:*screen-mode-line-format*
;;      (list "%w | "
;;            (get_battery)))

;; launch Emacs
(defcommand emacs () ()  ;! redefining emacs command
  "Start Emacs or switch to it, if it is already running."
  (run-or-raise "emacs" '(:class "Emacs")))

(defcommand chrome () ()
  (run-or-raise "google-chrome-stable" '(:instance "google-chrome-stable"))) ;doesn't work, why?
(define-key *root-map* (kbd "g") "chrome")

(defcommand alacritty () ()
  (run-or-raise "alacritty" '(:class "Alacritty")))
(define-key *root-map* (kbd "c") "alacritty")

;; lock screen
(defcommand system-lock () ()
	    (run-shell-command "xtrlock"))
(define-key *root-map* (kbd "L") "system-lock")

;; sleep
(defcommand system-sleep () ()
	    (run-commands "system-lock")
	    (run-shell-command "systemctl suspend"))
(define-key *root-map* (kbd "XF86Sleep") "system-sleep")

;;    (define-stumpwm-command "mymenu" ()
;;      (labels ((pick (options)
;;                 (let ((selection (stumpwm::select-from-menu (current-screen) options "")))
;;                   (cond
;;                     ((null selection)
;;                      (throw 'stumpwm::error "Abort."))
;;                     ((stringp (second selection))
;;                      (second selection))
;;                     (t
;;                      (pick (cdr selection)))))))
;;        (let ((choice (pick *app-menu*)))
;;          (run-shell-command choice))))
;;
;;    (defparameter *app-menu* '(("INTERNET"
;;                              ;; sub menu
;;                        ("Firefox" "firefox")
;;                        ("Skype" "skype"))
;;                   ("FUN"
;;                    ;; sub menu
;;                        ("option 2" "xlogo")
;;                        ("GnuChess" "xboard"))
;;                       ("WORK"
;;                    ;;submenu
;;                    ("OpenOffice.org" "openoffice"))
;;                   ("GRAPHICS"
;;                    ;;submenu
;;                    ("GIMP" "gimp"))
;;                    ("K3B" "k3b")))
