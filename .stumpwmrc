(in-package :stumpwm)

(defvar mode-line-is-on nil)
(if (not mode-line-is-on) (mode-line))
(defparameter mode-line-is-on t)

(defvar startup-programs '("redshift" "gnome-screensaver" "emacs --daemon"))
(map nil 'run-shell-command startup-programs)
(defparameter startup-programs '()) ;;only start programs the first time

(stumpwm:set-prefix-key (stumpwm:kbd "C-j"))

(setf *mouse-focus-policy* :click)

(defun get_battery ()
  (run-shell-command "upower -i /org/freedesktop/UPower/devices/battery_BAT1 | grep -Po '(?<=percentage:\\s{10})[0-9]+%' | tr -d '\\n'" t))

(defun get_time ()
  (run-shell-command "date +'%D %H:%M' | tr -d '\\n'" t))

(defun get_network ()
  (let ((nwstr (run-shell-command "nmcli | grep -Po '(?!docker)(?<=connected to ).+' | tr -d '\\n'" t)))
    (if (string= "" nwstr)
	"Not Connected"
	nwstr)))

(setf *screen-mode-line-format*
      (list '(:eval (get_battery)) " | " '(:eval (get_time)) " | " '(:eval (get_network)) " | %w"))

(defmacro define-command-and-bind (name command key &optional (key-map '*root-map*))
  `(progn (defcommand ,name () ()
	 ,command)
	(define-key ,key-map (kbd ,key) (string (quote ,name)))))

(defun my-run-or-raise (command class-name)
  (run-or-raise command (list :class class-name)))

;;TODO function that takes a list of (program, class, key) tuples and makes them all raisable

(defcommand emacs () ()  ;! redefining emacs command
  "Start Emacs or switch to it, if it is already running."
  (my-run-or-raise "emacsclient -c" "Emacs"))

(define-command-and-bind chrome (my-run-or-raise "google-chrome-stable" "Google-chrome") "g")

(define-command-and-bind alacritty (my-run-or-raise "alacritty -e tmux" "Alacritty") "c")

(define-command-and-bind system-lock (run-shell-command "gnome-screensaver-command -l") "L")

(define-command-and-bind pavucontrol (my-run-or-raise "pavucontrol" "Pavucontrol") "P")

(define-command-and-bind evince (my-run-or-raise "evince" "Evince") "E")

(define-command-and-bind system-sleep
    (progn
      (run-commands "system-lock")
      (run-shell-command "systemctl suspend")) "XF86Sleep" *top-map*)

					; brightness at /sys/class/backlight/intel_backlight/brightness
					; can just read/write it
(defun read-brightness () (run-shell-command "cat /sys/class/backlight/intel_backlight/brightness" t))
(defun set-brightness (new-brightness) (run-shell-command
					(concatenate 'string "echo " (write-to-string new-brightness)
						     " > /sys/class/backlight/intel_backlight/brightness")))

(define-command-and-bind brightness-up (run-shell-command "xbacklight -inc 10") "XF86MonBrightnessUp" *top-map*)
(define-command-and-bind brightness-down (run-shell-command "xbacklight -dec 10") "XF86MonBrightnessDown" *top-map*)

(define-command-and-bind audio-mute (run-shell-command "amixer sset Master toggle") "XF86AudioMute" *top-map*)
(define-command-and-bind audio-up (run-shell-command "amixer sset Master 5%+") "XF86AudioRaiseVolume" *top-map*)
(define-command-and-bind audio-down (run-shell-command "amixer sset Master 5%-") "XF86AudioLowerVolume" *top-map*)
