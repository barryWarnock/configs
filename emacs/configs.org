#+TITLE:Barry Warnock's emacs configs
#+AUTHOR:Barry Warnock

* Org Mode
** Appearance
*** prettify
arrow instead of ellipsis and pretty characters by default
#+BEGIN_SRC emacs-lisp
  ;;pretty arrow
  (setq org-ellipsis " â¤µ")

  ;;default to showing latex style characters as unicode
  (setq org-pretty-entities t)
#+END_SRC

** Usage
*** sub/superscripts
[sub/super]scripts must be surrounded by curly braces
#+BEGIN_SRC emacs-lisp
  (setq org-use-sub-superscripts "{}")
#+END_SRC

*** agenda
add org files to agenda
#+BEGIN_SRC emacs-lisp
  (customize-set-variable 'org-agenda-files '("~/Documents/notes/org/inbox.org"
                                              "~/Documents/notes/org/tasks.org"
                                              "~/Documents/notes/org/stasks.org"
                                              "~/Documents/notes/org/journal.org"
                                              "~/Documents/notes/org/kb.org"
                                              ))
#+END_SRC

*** capturing
#+BEGIN_SRC elisp
  (setq org-default-notes-file "~/Documents/notes/org/tasks.org")
  (setq org-inbox-file "~/Documents/notes/org/inbox.org")
  (setq ledger-file "~/Documents/notes/ledger")

  (setq org-capture-templates
        '(
          ;; classic org captures
          ("t" "Todo" entry (file+headline org-inbox-file "Tasks")
           "* TODO %^{name}\n %?\n  %i\n")
          ("n" "Note/Data" entry (file+headline org-inbox-file "Notes/Data")
           "* %?   \n  %i\n  %u\n  %a")

          ;; ledger captures
          ("l" "ledger entries")
          ("le" "expense" plain
           (file ledger-file)
           "
%(org-read-date) * %^{name}
    Expenses:%^{to}  $%^{amount}
    Assets:%^{from}
  ")
          ("li" "income" plain
           (file ledger-file)
           "
%(org-read-date) * %^{name}
    Assets:%^{to}  $%^{amount}
    Income:%^{from}
  ")))
#+END_SRC
*** refiling
#+BEGIN_SRC elisp
  (setq org-refile-targets '((nil :maxlevel . 3)
                             (org-agenda-files :maxlevel . 3)
                             ))
  (setq org-refile-use-outline-path 'file)
  (setq org-refile-allow-creating-parent-nodes t)
  (setq org-outline-path-complete-in-steps nil)
#+END_SRC

*** archiving
#+BEGIN_SRC elisp
  (defun org-archive-done-tasks ()
    (interactive)
    (org-map-entries
     (lambda ()
       (org-archive-subtree)
       (setq org-map-continue-from (outline-previous-heading)))
     "/DONE" 'file)
    (org-map-entries
     (lambda ()
       (org-archive-subtree)
       (setq org-map-continue-from (outline-previous-heading)))
     "/CANCELLED" 'file)
    )
#+END_SRC
*** keybinds
M-ret should insert new list items or headers
#+BEGIN_SRC emacs-lisp
  (org-defkey org-mode-map (kbd "M-<return>") 'org-meta-return)
#+END_SRC

* Lisps
** smartparens
Enable smartparens strict mode in lisp modes
#+BEGIN_SRC emacs-lisp
  (defun enable-lisp-minor-modes ()
    (smartparens-strict-mode t))

  (add-hook 'lisp-mode-hook 'enable-lisp-minor-modes)
  (add-hook 'emacs-lisp-mode-hook 'enable-lisp-minor-modes)
#+END_SRC

** keybinds
smartparens bindings
#+BEGIN_SRC emacs-lisp
  (define-key lisp-mode-shared-map (kbd "C-)") 'sp-forward-slurp-sexp)
  (define-key lisp-mode-shared-map (kbd "C-(") 'sp-backward-slurp-sexp)
  (define-key lisp-mode-shared-map (kbd "C-}") 'sp-forward-barf-sexp)
  (define-key lisp-mode-shared-map (kbd "C-{") 'sp-backward-barf-sexp)
#+END_SRC
* TODO Eclim
set eclim configs
#+BEGIN_SRC elisp
  (setq eclimd-default-workspace "~/eclipse-workspace"
        eclimd-wait-for-process t)
#+END_SRC
* General File Functions
** open this file
 #+BEGIN_SRC emacs-lisp
   (defun warnock/find-conffile ()
     (interactive)
     (find-file-existing (expand-file-name "configs.org" user-emacs-directory)))
 #+END_SRC

** open in notes
#+BEGIN_SRC emacs-lisp
  (defun warnock/open-notes ()
    (interactive)
    (helm-find-files-1 "~/Documents/notes/"))
#+END_SRC
** open in org
#+BEGIN_SRC emacs-lisp
  (defun warnock/open-org ()
    (interactive)
    (helm-find-files-1 "~/Documents/notes/org/"))
#+END_SRC
** open in school
#+BEGIN_SRC emacs-lisp
  (defun warnock/open-school ()
    (interactive)
    (helm-find-files-1 "~/Documents/notes/school/fourth_year/"))
#+END_SRC
* Spacemacs
** keybinds
#+BEGIN_SRC emacs-lisp
  (spacemacs/declare-prefix "fn" "open-in-notes")
  (spacemacs/declare-prefix "am" "mobile-org")
  (spacemacs/set-leader-keys 
                                          ;applications
    ;;calc
    "ac" 'quick-calc

                                          ;files
    "fec" 'warnock/find-conffile
    "fnn" 'warnock/open-notes
    "fns" 'warnock/open-school
    "fno" 'warnock/open-org
    )
#+END_SRC
* Misc
  snippets only live here until I can think of a more appropriate header for them
** auto-follow symlinks
#+BEGIN_SRC emacs-lisp
(setq vc-follow-symlinks t)
#+END_SRC
** replace selection with paste
#+BEGIN_SRC elisp
  (delete-selection-mode)
#+END_SRC
** don't create useless files
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist
                  `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
        `((".*" ,temporary-file-directory t))) 
  (setq create-lockfiles nil)
#+END_SRC
** use chrome when opening links
#+BEGIN_SRC emacs-lisp
  (setq browse-url-browser-function 'browse-url-chrome)
#+END_SRC
