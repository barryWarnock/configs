#+TITLE:Barry Warnock's emacs configs
#+AUTHOR:Barry Warnock

* Org Mode
** Appearance
*** prettify
arrow instead of ellipsis and pretty characters by default
#+BEGIN_SRC emacs-lisp
  ;;pretty arrow
  (setq org-ellipsis " â¤µ")

  ;;default to showing latex style characters as unicode
  (setq org-pretty-entities t)
#+END_SRC

** Usage
*** sub/superscripts
[sub/super]scripts must be surrounded by curly braces
#+BEGIN_SRC emacs-lisp
  (setq org-use-sub-superscripts "{}")
#+END_SRC

*** agenda
add org files to agenda
#+BEGIN_SRC emacs-lisp
  (customize-set-variable 'org-agenda-files '("~/org"))
#+END_SRC

custom agendas
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-custom-commands
        '(("w" "Work"
          ((tags-todo "USERSTORY")
            (tags-todo "GENERALWORK")))))
#+END_SRC

*** capturing
#+BEGIN_SRC emacs-lisp
  (setq org-default-notes-file "~/org/tasks.org")
  (setq org-inbox-file "~/inbox.org")
  (setq ledger-file "~/Documents/notes/ledger")

  (setq org-capture-templates
        '(
          ;; classic org captures
          ("t" "Todo" entry (file+headline org-inbox-file "Tasks")
           "* TODO %^{name}\n %?\n  %i\n")
          ("n" "Note/Data" entry (file+headline org-inbox-file "Notes/Data")
           "* %?   \n  %i\n  %u\n  %a")

          ;; ledger captures
          ("l" "ledger entries")
          ("le" "expense" plain
           (file ledger-file)
           "
%(org-read-date) * %^{name}
    Expenses:%^{to}  $%^{amount}
    Assets:%^{from}
  ")
          ("li" "income" plain
           (file ledger-file)
           "
%(org-read-date) * %^{name}
    Assets:%^{to}  $%^{amount}
    Income:%^{from}
  ")))
#+END_SRC

*** refiling
#+BEGIN_SRC emacs-lisp
  (setq org-refile-targets '((nil :maxlevel . 3)
                             (org-agenda-files :maxlevel . 3)
                             ))
  (setq org-refile-use-outline-path 'file)
  (setq org-refile-allow-creating-parent-nodes t)
  (setq org-outline-path-complete-in-steps nil)
#+END_SRC

*** archiving
#+BEGIN_SRC emacs-lisp
  (defun org-archive-done-tasks ()
    (interactive)
    (org-map-entries
     (lambda ()
       (org-archive-subtree)
       (setq org-map-continue-from (outline-previous-heading)))
     "/DONE" 'file)
    (org-map-entries
     (lambda ()
       (org-archive-subtree)
       (setq org-map-continue-from (outline-previous-heading)))
     "/CANCELLED" 'file)
    )
#+END_SRC

*** keybinds
M-ret should insert new list items or headers
#+BEGIN_SRC emacs-lisp
  (org-defkey org-mode-map (kbd "M-<return>") 'org-meta-return)
#+END_SRC

* Lisps
** smartparens
Enable smartparens strict mode in lisp modes
#+BEGIN_SRC emacs-lisp
  (defun enable-lisp-minor-modes ()
    (smartparens-strict-mode t))

  (add-hook 'lisp-mode-hook 'enable-lisp-minor-modes)
  (add-hook 'emacs-lisp-mode-hook 'enable-lisp-minor-modes)
#+END_SRC

** lisp commands won't switch state
#+BEGIN_SRC emacs-lisp
  (setq evil-lisp-state-enter-lisp-state-on-command nil)
#+END_SRC
* General File Functions
** open this file
 #+BEGIN_SRC emacs-lisp
   (defun warnock/find-conffile ()
     (interactive)
     (find-file-existing (expand-file-name "configs.org" user-emacs-directory)))
 #+END_SRC

** open in org
#+BEGIN_SRC emacs-lisp
  (defun warnock/open-org ()
    (interactive)
    (helm-find-files-1 "~/org/"))
#+END_SRC

* Terminal
** save history for scrolling
#+BEGIN_SRC emacs-lisp
  (setq multi-term-scroll-show-maximum-output t)
#+END_SRC

** bindings
#+BEGIN_SRC emacs-lisp
  ;; substitute emacs state for insert state
    (evil-define-key 'normal term-mode-map "i"
      (lambda ()
        (interactive)
        (evil-hybrid-state)))
    (evil-define-key 'normal term-raw-map "i"
      (lambda ()
        (interactive)
        (evil-hybrid-state)))
    (evil-define-key 'emacs term-raw-map "<escape>"
      (lambda ()
        (interactive)
        (evil-normal-state)))

  (defun config//term-normal-state ()
    "Enable `term-line-mode' when in normal state in `term-mode' buffer."
    (term-line-mode))

  (defun config//term-insert-state ()
    "Enable `term-char-mode' when in insert state in a `term-mode' buffer."
    (when (get-buffer-process (current-buffer))
      (term-char-mode)
      ))

  (defun config//term-evil-bindings ()
    "Enable term support for vim and hybrid editing styles."
    (add-hook 'evil-hybrid-state-entry-hook 'config//term-insert-state nil t)
    (add-hook 'evil-insert-state-entry-hook 'config//term-insert-state nil t)
    (add-hook 'evil-hybrid-state-exit-hook 'config//term-normal-state nil t)
    (add-hook 'evil-insert-state-exit-hook 'config//term-normal-state nil t))

  (setq term-char-mode-point-at-process-mark t)
  (add-hook 'term-mode-hook 'config//term-evil-bindings)
#+END_SRC

terminal hydra
#+BEGIN_SRC emacs-lisp
  (defhydra hydra-terminal (global-map "C-c t")
    "terminal"
    ("j" multi-term-next "next")
    ("k" multi-term-prev "prev")
    ("c" multi-term  "new" :color blue)
    ("q" nil "cancel"))
#+END_SRC

** default to hybrid state
#+BEGIN_SRC emacs-lisp
  (delete 'term-mode evil-insert-state-modes)
  (add-to-list 'evil-hybrid-state-modes 'term-mode)
#+END_SRC
* Spacemacs
** TODO keybinds
#+BEGIN_SRC emacs-lisp
  (spacemacs/set-leader-keys 
                                          ;applications
                                          ;;calc
    "ac" 'quick-calc
                                          ;;terminal
    "at" 'hydra-terminal/body
                                          ;files
    "fec" 'warnock/find-conffile
    "fn" 'warnock/open-org
    )
#+END_SRC

* Misc
  snippets only live here until I can think of a more appropriate header for them
** auto-follow symlinks
#+BEGIN_SRC emacs-lisp
(setq vc-follow-symlinks t)
#+END_SRC

** replace selection with paste
#+BEGIN_SRC elisp
  (delete-selection-mode 1)
#+END_SRC

** don't create useless files
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist
                  `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
        `((".*" ,temporary-file-directory t))) 
  (setq create-lockfiles nil)
#+END_SRC

** use chrome when opening links
#+BEGIN_SRC emacs-lisp
  (setq browse-url-browser-function 'browse-url-chrome)
#+END_SRC
